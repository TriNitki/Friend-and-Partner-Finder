import os
import json

import telebot
import sqlite3
import models

from dotenv import load_dotenv
from telebot import types

from func import delete_user, check_city, year_type, define_user


load_dotenv()


#bot
bot_token = os.getenv("bot_token")
bot = telebot.TeleBot(bot_token)

user = models.User()



'''=========MSG==HANDLER========='''
"New user greet"
@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ú–µ–Ω—é üè†")
    markup.add(item1)
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.chat.username}üëã!\
                    \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "DetectlyBot"! –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π –∏ –±–∏–∑–Ω–µ—Å –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤.', reply_markup=markup)

"Commands that require db access"
@bot.message_handler(content_types=['text'])
def db_req_com(message):
    global connect, cursor, user
    connect = sqlite3.connect('users.sqlite3', check_same_thread=False)
    cursor = connect.cursor()
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    # Create new db if it isn't exist
    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(
        id          INTEGER,
        first_name  STRING,
        second_name STRING,
        age         INTEGER,
        sex         STRING,
        city        STRING,
        region      STRING,
        interests   STRING
    )""")
    connect.commit()

    cursor.execute(f"SELECT id FROM login_id WHERE id = {message.chat.id}")
    data = cursor.fetchone()
    if data != None:
        user = define_user(message)

    if message.text.lower() in ["/reg", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úè"]:
        #register user if it isn't exist
        if data == None:
            reg_user(message)
        else:
            bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')
    elif message.text.lower() in ["/delete", "—É–¥–∞–ª–µ–Ω–∏–µ üö´"]:
        #delete user if it is exist
        if data == None:
            bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reg.')
        else:
            markup = get_menu(message, type="alert")
            bot.send_message(message.chat.id, '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–∞—à—É –∞–Ω–∫–µ—Ç—É?', reply_markup=markup)
            bot.register_next_step_handler(message, alert_delete)
    elif message.text.lower() in ["/me", "–º–æ—è –∞–Ω–∫–µ—Ç–∞ üë§"]:
        #greet user if it is exist
        if data == None:
            bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reg')
        else:
            greet_user(message)
    elif message.text.lower() in ["/help", "–ø–æ–º–æ—â—å üÜò"]:
        help(message)
    elif message.text.lower() in ["/main", "–º–µ–Ω—é üè†"]:
        main_menu(message)
    elif message.text.lower() in ["/edit", "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üõ†"]:
        if data == None:
            bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω.\n–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reg')
        else:
            markup = get_menu(message, "edit")
            bot.send_message(message.chat.id, '–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=markup)
            bot.register_next_step_handler(message, edit_profile)
    else:
        bot.reply_to(message, 'ü§®')
        bot.send_message(message.chat.id, '–ù–µ –ø–æ–Ω—è–ª.\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.')

'''=============================='''


def greet_user(message):
    markup = get_menu(message, type = "main")

    real_sex = {"m": "–º—É–∂—Å–∫–æ–π", "w": "–∂–µ–Ω—Å–∫–∏–π", "undef": "—Å–µ–∫—Ä–µ—Ç–Ω—ã–π"}[user.sex]

    'Greet'
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {user.second_name} {user.first_name}. –¢–µ–±–µ {user.age} {year_type(user.age)}.')
    if user.city != 'undef':
        bot.send_message(message.chat.id, f'–¢–≤–æ–π –ø–æ–ª - {real_sex}. –¢—ã –∂–∏–≤–µ—à—å –≤ –≥–æ—Ä–æ–¥–µ {user.city}, {user.region}')
    else:
        bot.send_message(message.chat.id, f'–¢–≤–æ–π –ø–æ–ª - {real_sex}.')
    bot.send_message(message.chat.id, f'–¢–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {", ".join(json.loads(user.interests))}.', reply_markup=markup)

def help(message):
    markup = get_menu(message, type="help")
    bot.send_message(message.chat.id,   '/help - –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\
                                        \n/main - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\
                                        \n/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã\
                                        \n/edit - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\
                                        \n/delete - –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã\
                                        \n/me - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã', reply_markup=markup)

def main_menu(message):
    markup = get_menu(message, type="main")
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é!', reply_markup=markup)

def alert_delete(message):
    if message.text.lower() in ["–¥–∞", "–¥–∞ ‚úÖ"]:
        delete_user(message.chat.id)
        markup = get_menu(message, type="main")
        bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—ã–ª —É–¥–∞–ª–µ–Ω.\n–î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reg.', reply_markup=markup)
    elif message.text.lower() in ["–Ω–µ—Ç", "–Ω–µ—Ç ‚ùå"]:
        bot.send_message(message.chat.id, '–†–∞–¥, —á—Ç–æ –í—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏!')
    else:
        bot.reply_to(message.chat.id, '–ù–µ –ø–æ–Ω—è–ª.')
        bot.send_message(message.chat.id, '–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–∞—à—É –∞–Ω–∫–µ—Ç—É?')
        bot.register_next_step_handler(message, alert_delete)

def get_menu(message, type):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)

    item_reg = types.KeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚úè")
    item_me = types.KeyboardButton("–ú–æ—è –∞–Ω–∫–µ—Ç–∞ üë§")
    item_edit = types.KeyboardButton("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ üõ†")
    item_delete = types.KeyboardButton("–£–¥–∞–ª–µ–Ω–∏–µ üö´")
    item_help = types.KeyboardButton("–ü–æ–º–æ—â—å üÜò")
    item_main = types.KeyboardButton("–ú–µ–Ω—é üè†")

    item_yes = types.KeyboardButton("–î–∞ ‚úÖ")
    item_no = types.KeyboardButton("–ù–µ—Ç ‚ùå")

    item_man = types.KeyboardButton("–Ø –ø–∞—Ä–µ–Ω—å üë®")
    item_woman = types.KeyboardButton("–Ø –¥–µ–≤—É—à–∫–∞ üë©‚Äçü¶∞")
    item_nosex = types.KeyboardButton("ATTACK HELICOPTER üöÅ")

    item_fname = types.KeyboardButton("–ò–º—è üëã")
    item_sname = types.KeyboardButton("–§–∞–º–∏–ª–∏—è üë®‚Äçüë©‚Äçüëß")
    item_age = types.KeyboardButton("–í–æ–∑—Ä–∞—Å—Ç üîû")
    item_sex = types.KeyboardButton("–ü–æ–ª üåù")
    item_city = types.KeyboardButton("–ì–æ—Ä–æ–¥ üèô")
    item_interests = types.KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å—ã üåà")
    item_changeall = types.KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ ‚ò†Ô∏è")
    item_back = types.KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")

    cursor.execute(f"SELECT id FROM login_id WHERE id = {message.chat.id}")
    data = cursor.fetchone()
    
    if type == "alert":
        markup.add(item_yes, item_no)
    elif type == "help":
        if data==None:
            markup.add(item_reg, item_delete, item_me, item_edit, item_main, item_help)
        else:
            markup.add(item_delete, item_me, item_edit, item_help, item_main, item_reg)
    elif type == "edit":
        markup.add(item_fname, item_sname, item_age, item_sex, item_city, item_interests, item_changeall, item_back)
    elif type == "sex":
        markup.add(item_man, item_woman, item_nosex)
    else:
        if data==None:
            markup.add(item_reg)
        else:
            markup.add(item_delete, item_me, item_edit, item_help)
    
    return markup


'''=========Registration========='''
def reg_user(message):
    markup = types.ReplyKeyboardRemove()
    user.id = message.chat.id
    bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –±—É–¥–µ—Ç –∏–º—è?", reply_markup=markup)
    bot.register_next_step_handler(message, get_first_name)

def get_first_name(message):
    try:
        user.first_name = message.text
    except:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –±—É–¥–µ—Ç –∏–º—è?")
        bot.register_next_step_handler(message, get_first_name)
        return

    bot.send_message(message.chat.id, '–ö–∞–∫–∞—è —É —Ç–µ–±—è –±—É–¥–µ—Ç —Ñ–∞–º–∏–ª–∏—è?')
    bot.register_next_step_handler(message, get_second_name)

def get_second_name(message):
    try:
        user.second_name = message.text
    except:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')
        bot.send_message(message.chat.id, "–ö–∞–∫–∞—è —É —Ç–µ–±—è –±—É–¥–µ—Ç —Ñ–∞–º–∏–ª–∏—è?")
        bot.register_next_step_handler(message, get_age)
        return
    
    bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?')
    bot.register_next_step_handler(message, get_age)

def get_age(message):
    try:
        user.age = int(message.text)
    except:
        bot.reply_to(message, '–ú–æ–∂–µ—Ç –ª—É—á—à–µ —Ü–∏—Ñ—Ä–∞–º–∏ –≤–≤–µ–¥–µ—à—å?')
        bot.register_next_step_handler(message, get_age)
        return

    markup = get_menu(message, type = "sex")
    bot.send_message(message.chat.id, '–ö–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?', reply_markup=markup)
    bot.register_next_step_handler(message, get_sex)

def get_sex(message):
    markup = get_menu(message, type = "sex")
    try:
        if message.text.lower() in ['–º', '–º—É–∂—Å–∫–æ–π', '–º—É–∂', '–º—É–∂–∏–∫', 'm', 'man', '—è –ø–∞—Ä–µ–Ω—å üë®']:
            user.sex = 'm'
        elif message.text.lower() in ['–∂', '–∂–µ–Ω—Å–∫–∏–π', '–∂–µ–Ω', '–¥–µ–≤—É—à–∫–∞', '–∂–µ–Ω—â–∏–Ω–∞', 'w', 'woman', '—è –¥–µ–≤—É—à–∫–∞ üë©‚Äçü¶∞']:
            user.sex = 'w'
        elif message.text.lower() in ['–ø', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ø—Ä–∞–ø—É—Å—Ç–∏—Ç—å', '–Ω–µ', '–Ω–µ—Ç', 'u', 'undef', 'undefined', "attack helicopter üöÅ"]:
            user.sex = 'undef'
        else:
            bot.reply_to(message, '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ –ø–æ–ª–∞ —è –Ω–µ –∑–Ω–∞—é. –í–æ—Ç –∫–∞–∫–∏–µ —è –∑–Ω–∞—é:', reply_markup=markup)
            bot.send_message(message.chat.id, '–ú - –º—É–∂—Å–∫–æ–π\
                            \n–ñ - –∂–µ–Ω—Å–∫–∏–π\
                            \n–ü - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å')
            bot.register_next_step_handler(message, get_sex)
            return
    except:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?", reply_markup=markup)
        bot.register_next_step_handler(message, get_sex)
        return
    
    markup = types.ReplyKeyboardRemove()
    bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?', reply_markup=markup)
    bot.register_next_step_handler(message, get_city)

def get_city(message):
    try:
        new_city = check_city(message.text.title())
        if new_city:
            user.city = new_city["city"]
            user.region = new_city["region"]
        elif message.text.lower() == '–ø':
            user.city = 'undef'
            user.region = 'undef'
        else:
            bot.reply_to(message, '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —è –Ω–µ –∑–Ω–∞—é.\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–ü" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞.')
            bot.register_next_step_handler(message, get_city)
            return
    except:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')
        bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?")
        bot.register_next_step_handler(message, get_city)
        return
    
    bot.send_message(message.chat.id, '–ü–µ—Ä–µ—á–∏—Å–ª–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
    bot.register_next_step_handler(message, get_interests)

def get_interests(message):
    try:
        interests = [item.strip() for item in message.text.lower().split(',')]
        user.interests = json.dumps(interests, indent=4, ensure_ascii=False)
    except:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')
        bot.send_message(message.chat.id, "–ü–µ—Ä–µ—á–∏—Å–ª–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        bot.register_next_step_handler(message, get_interests)
        return
    
    cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?, ?, ?, ?);", user.get_data())
    connect.commit()
    greet_user(message)
'''=============================='''


'''=============Edit============='''
def edit_profile(message):
    markup = types.ReplyKeyboardRemove()
    if message.text.lower() in ["–∏", "–∏–º—è", "–∏–º—è üëã"]:
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –±—É–¥–µ—Ç –∏–º—è?", reply_markup=markup)
        bot.register_next_step_handler(message, edit_first_name)
    elif message.text.lower() in ["—Ñ", "—Ñ–∞–º–∏–ª–∏—è", "—Ñ–∞–º–∏–ª–∏—è üë®‚Äçüë©‚Äçüëß"]:
        bot.send_message(message.chat.id, '–ö–∞–∫–∞—è —É —Ç–µ–±—è –±—É–¥–µ—Ç —Ñ–∞–º–∏–ª–∏—è?', reply_markup=markup)
        bot.register_next_step_handler(message, edit_second_name)
    elif message.text.lower() in ["–≤", "–≤–æ–∑—Ä–∞—Å—Ç", "–≤–æ–∑—Ä–∞—Å—Ç üîû"]:
        bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?', reply_markup=markup)
        bot.register_next_step_handler(message, edit_age)
    elif message.text.lower() in ["–ø", "–ø–æ–ª", "–ø–æ–ª üåù"]:
        bot.send_message(message.chat.id, '–ö–∞–∫–æ–≥–æ —Ç—ã –ø–æ–ª–∞?', reply_markup=markup)
        bot.register_next_step_handler(message, edit_sex)
    elif message.text.lower() in ["–≥", "–≥–æ—Ä–æ–¥", "–≥–æ—Ä–æ–¥ üèô"]:
        bot.send_message(message.chat.id, '–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?', reply_markup=markup)
        bot.register_next_step_handler(message, edit_city)
    elif message.text.lower() in ["–∏–Ω", "–∏–Ω—Ç–µ—Ä–µ—Å—ã", "–∏–Ω—Ç–µ—Ä–µ—Å—ã üåà"]:
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.', reply_markup=markup)
        bot.register_next_step_handler(message, edit_interests)
    elif message.text.lower() in ["–≤—Å–µ", "–≤—Å—ë", "–∏–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ", "–∏–∑–º–µ–Ω–∏—Ç—å –≤—Å–µ ‚ò†Ô∏è"]:
        delete_user(message.chat.id)
        reg_user(message)
    elif message.text.lower() in ["–Ω", "–Ω–∏—á–µ–≥–æ", "–Ω–∞–∑–∞–¥", "–Ω–∞–∑–∞–¥ ‚¨ÖÔ∏è"]:
        greet_user(message)
        return
    else:
        bot.reply_to(message, "–¢–∞–∫–æ–≥–æ —è –Ω–µ –∑–Ω–∞—é.")
        markup = get_menu(message, "edit")
        bot.send_message(message.chat.id, '–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=markup)

def edit_first_name(message):
    try:
        user.first_name = message.text
    except:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')
        bot.send_message(message.chat.id, "–ö–∞–∫–æ–µ —É —Ç–µ–±—è –±—É–¥–µ—Ç –∏–º—è?")
        bot.register_next_step_handler(message, edit_first_name)
        return
    delete_user(message.chat.id)
    cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?, ?, ?, ?);", user.get_data())
    connect.commit()
    bot.reply_to(message, '–ü–æ–Ω—è–ª!')
    back_to_edit(message)

def edit_second_name(message):
    try:
        user.second_name = message.text
    except:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')
        bot.send_message(message.chat.id, '–ö–∞–∫–∞—è —É —Ç–µ–±—è –±—É–¥–µ—Ç —Ñ–∞–º–∏–ª–∏—è?')
        bot.register_next_step_handler(message, edit_second_name)
        return
    delete_user(message.chat.id)
    cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?, ?, ?, ?);", user.get_data())
    connect.commit()
    bot.reply_to(message, '–ü–æ–Ω—è–ª!')
    back_to_edit(message)

def edit_age(message):
    try:
        user.age = int(message.text)
    except:
        bot.reply_to(message, '–ú–æ–∂–µ—Ç –ª—É—á—à–µ —Ü–∏—Ñ—Ä–∞–º–∏ –≤–≤–µ–¥–µ—à—å?')
        bot.register_next_step_handler(message, edit_age)
        return
    delete_user(message.chat.id)
    cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?, ?, ?, ?);", user.get_data())
    connect.commit()
    bot.reply_to(message, '–ü–æ–Ω—è–ª!')
    back_to_edit(message)

def edit_sex(message):
    if message.text.lower() in ['–º', '–º—É–∂—Å–∫–æ–π', '–º—É–∂', '–º—É–∂–∏–∫', 'm', 'man']:
        user.sex = 'm'
    elif message.text.lower() in ['–∂', '–∂–µ–Ω—Å–∫–∏–π', '–∂–µ–Ω', '–¥–µ–≤—É—à–∫–∞', '–∂–µ–Ω—â–∏–Ω–∞', 'w', 'woman']:
        user.sex = 'w'
    elif message.text.lower() in ['–ø', '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–ø—Ä–∞–ø—É—Å—Ç–∏—Ç—å', '–Ω–µ', '–Ω–µ—Ç', 'u', 'undef', 'undefined']:
        user.sex = 'undef'
    else:
        bot.reply_to(message, '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ –ø–æ–ª–∞ —è –Ω–µ –∑–Ω–∞—é. –í–æ—Ç –∫–∞–∫–∏–µ —è –∑–Ω–∞—é:')
        bot.send_message(message.chat.id, '–ú - –º—É–∂—Å–∫–æ–π\
                         \n–ñ - –∂–µ–Ω—Å–∫–∏–π\
                         \n–ü - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å')
        bot.register_next_step_handler(message, edit_sex)
        return
    delete_user(message.chat.id)
    cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?, ?, ?, ?);", user.get_data())
    connect.commit()
    bot.reply_to(message, '–ü–æ–Ω—è–ª!')
    back_to_edit(message)

def edit_city(message):
    new_city = check_city(message.text.title())
    if new_city:
        user.city = new_city["city"]
        user.region = new_city["region"]
    elif message.text.lower() == '–ø':
        user.city = 'undef'
        user.region = 'undef'
    else:
        bot.reply_to(message, '–ü—Ä–æ—Å—Ç–∏, –Ω–æ —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ —è –Ω–µ –∑–Ω–∞—é.\n–ü–æ–ø—Ä–æ–±—É–π –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ "–ü" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞.')
        bot.register_next_step_handler(message, edit_city)
        return
    delete_user(message.chat.id)
    cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?, ?, ?, ?);", user.get_data())
    connect.commit()
    bot.reply_to(message, '–ü–æ–Ω—è–ª!')
    back_to_edit(message)

def edit_interests(message):
    try:
        interests = [item.strip() for item in message.text.lower().split(',')]
        user.interests = json.dumps(interests, indent=4, ensure_ascii=False)
    except:
        bot.reply_to(message, '–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –¥—Ä—É–≥–æ–µ.')
        bot.send_message(message.chat.id, '–ü–µ—Ä–µ—á–∏—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.')
        bot.register_next_step_handler(message, edit_interests)
        return
    delete_user(message.chat.id)
    cursor.execute("INSERT INTO login_id VALUES(?, ?, ?, ?, ?, ?, ?, ?);", user.get_data())
    connect.commit()
    bot.reply_to(message, '–ü–æ–Ω—è–ª!')
    back_to_edit(message)

def back_to_edit(message):
    markup = get_menu(message, "edit")
    bot.send_message(message.chat.id, '–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', reply_markup=markup)
    bot.register_next_step_handler(message, edit_profile)
'''=============================='''



bot.polling()